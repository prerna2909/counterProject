{"version":3,"sources":["component/counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","increment","by","setState","counter","state","decrement","reset","className","incrementMethod","this","decrementMethod","onClick","Component","CounterButton","props","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAKMA,G,wDAEF,aAAc,IAAD,8BACT,gBAMJC,UAAW,SAACC,GACR,EAAKC,SAAS,CACVC,QAAS,EAAKC,MAAMD,QAAUF,KATzB,EAabI,UAAW,SAACJ,GACR,EAAKC,SAAS,CACVC,QAAS,EAAKC,MAAMD,QAAUF,KAfzB,EAmBbK,MAAM,WACD,EAAKJ,SAAS,CACXC,QAAS,KAnBb,EAAKC,MAAO,CACRD,QAAQ,GAHH,E,qDA0BT,OACI,yBAAKI,UAAU,WACX,kBAAC,EAAD,CAAeN,GAAI,EAAGO,gBAAkBC,KAAKT,UAAWU,gBAAkBD,KAAKJ,YAC/E,kBAAC,EAAD,CAAeJ,GAAI,EAAGO,gBAAkBC,KAAKT,UAAWU,gBAAkBD,KAAKJ,YAC/E,kBAAC,EAAD,CAAeJ,GAAI,GAAIO,gBAAkBC,KAAKT,UAAWU,gBAAkBD,KAAKJ,YAChF,8BAAOI,KAAKL,MAAMD,SAClB,6BAAK,4BAAQI,UAAU,QAAQI,QAASF,KAAKH,OAAxC,e,GAlCCM,cA0ChBC,E,kDACF,aAAc,IAAD,8BACT,gBAMJb,UAAW,WACP,EAAKE,SAAS,CACVC,QAAS,EAAKC,MAAMD,QAAU,EAAKW,MAAMb,KAE7C,EAAKa,MAAMN,gBAAgB,EAAKM,MAAMb,KAX7B,EAcbI,UAAW,WACP,EAAKH,SAAS,CACVC,QAAS,EAAKC,MAAMD,QAAU,EAAKW,MAAMb,KAE7C,EAAKa,MAAMJ,gBAAgB,EAAKI,MAAMb,KAhBtC,EAAKG,MAAO,CACRD,QAAQ,GAHH,E,qDAsBT,OACI,yBAAKI,UAAU,WACX,4BAAQI,QAASF,KAAKT,WAAtB,IAAmCS,KAAKK,MAAMb,IAC9C,4BAAQU,QAASF,KAAKJ,WAAtB,IAAmCI,KAAKK,MAAMb,S,GA1BlCW,aAgCbb,IClEAgB,E,uKART,OACI,yBAAKR,UAAU,OACd,kBAAC,EAAD,W,GAJOK,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c7a4f89a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Counter.css';\r\n\r\n\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            counter:0\r\n        }\r\n    }\r\n\r\n    increment= (by) =>{\r\n        this.setState({\r\n            counter: this.state.counter + by\r\n        })\r\n    }\r\n\r\n    decrement= (by) =>{\r\n        this.setState({\r\n            counter: this.state.counter - by\r\n        })\r\n    }\r\n\r\n    reset=() =>{\r\n         this.setState({\r\n            counter: 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"counter\">\r\n                <CounterButton by={1} incrementMethod ={this.increment} decrementMethod ={this.decrement}/>\r\n                <CounterButton by={5} incrementMethod ={this.increment} decrementMethod ={this.decrement}/>\r\n                <CounterButton by={10} incrementMethod ={this.increment} decrementMethod ={this.decrement}/>\r\n                <span>{this.state.counter}</span>\r\n                <div><button className=\"reset\" onClick={this.reset}>Reset</button></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nclass CounterButton extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            counter:0\r\n        }\r\n    }\r\n\r\n    increment= () =>{\r\n        this.setState({\r\n            counter: this.state.counter + this.props.by\r\n        })\r\n        this.props.incrementMethod(this.props.by)\r\n    }\r\n\r\n    decrement= () =>{\r\n        this.setState({\r\n            counter: this.state.counter - this.props.by\r\n        })\r\n        this.props.decrementMethod(this.props.by)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"counter\">\r\n                <button onClick={this.increment}>+{this.props.by}</button>\r\n                <button onClick={this.decrement}>-{this.props.by}</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter;\r\n","import React, { Component } from 'react';\nimport Counter from './component/counter/Counter';\n\nclass App extends Component {\n  render(){\n      return (\n          <div className=\"App\">\n           <Counter/>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}